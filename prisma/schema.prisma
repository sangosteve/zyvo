generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  clerkId      String        @unique
  email        String        @unique
  firstname    String?
  lastname     String?
  createdAt    DateTime      @default(now())
  contacts     Contact[]
  integrations Integration[]
  automations  Automation[]
}

model Contact {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  email     String   @unique
  firstname String?
  lastname  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
}

model Integration {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  userId         String          @db.Uuid
  user           User            @relation(fields: [userId], references: [id])
  type           IntegrationType
  accessToken    String
  refreshToken   String? // optional, only for providers that support it
  expiresAt      DateTime? // optional, if the token expires
  externalUserId String // the user ID from the external service (e.g. Instagram user id)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([userId, type])
  @@unique([externalUserId, type]) // <- add this if you want to prevent sharing osf the same instagram account
}

model Automation {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  name        String    @default("Untitled")
  description String?
  createdAt   DateTime  @default(now())
  active      Boolean   @default(false)
  triggers    Trigger[]
  actions     Action[]
  User        User?     @relation(fields: [userId], references: [id])
  userId      String?   @db.Uuid()
}

model Trigger {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  type         String
  Automation   Automation? @relation(fields: [automationId], references: [id])
  automationId String?     @db.Uuid()
  event        String? // e.g. "new_message"
}

model Action {
  id           String     @id @default(uuid()) @db.Uuid
  type         String // e.g. "send_instagram_dm"
  data         Json // e.g. { message: "Hi there!" }
  automation   Automation @relation(fields: [automationId], references: [id])
  automationId String     @db.Uuid

  // ðŸ‘‡ These are new
  parentActionId String?  @db.Uuid
  parentAction   Action?  @relation("ActionParent", fields: [parentActionId], references: [id])
  nextActions    Action[] @relation("ActionParent") // reverse relation
  order          Int      @default(0) // Optional: useful if you want absolute ordering within a branch (even if you donâ€™t branch yet)
}

enum IntegrationType {
  INSTAGRAM
  GMAIL
  FACEBOOK
  WHATSAPP
  SMS
}
